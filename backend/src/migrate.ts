import pool from './db'

async function migrate() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')

    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è)
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        email VARCHAR(255) NOT NULL UNIQUE,
        password VARCHAR(255),
        phone VARCHAR(50),
        user_type ENUM('worker', 'employer') NOT NULL DEFAULT 'worker',
        photo TEXT,
        age INT DEFAULT 0,
        skills JSON,
        experience TEXT,
        has_other_jobs BOOLEAN DEFAULT FALSE,
        auth_provider VARCHAR(50) DEFAULT '',
        last_login TIMESTAMP NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        
        INDEX idx_email (email),
        INDEX idx_user_type (user_type),
        INDEX idx_auth_provider (auth_provider)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    `)
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞')

    // –¢–∞–±–ª–∏—Ü–∞ –≤–∞–∫–∞–Ω—Å–∏–π (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è)
    await pool.query(`
      CREATE TABLE IF NOT EXISTS jobs (
        id INT AUTO_INCREMENT PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        description TEXT NOT NULL,
        salary VARCHAR(100),
        salary_amount INT,
        location VARCHAR(255),
        phone VARCHAR(50),
        date DATE,
        category VARCHAR(100),
        requirements JSON,
        employer VARCHAR(255),
        urgency ENUM('low', 'medium', 'high') DEFAULT 'medium',
        employment_type ENUM('full-time', 'part-time', 'freelance', 'contract') DEFAULT 'full-time',
        user_id INT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL,
        INDEX idx_category (category),
        INDEX idx_location (location),
        INDEX idx_urgency (urgency),
        INDEX idx_employment_type (employment_type),
        INDEX idx_salary_amount (salary_amount),
        INDEX idx_created_at (created_at),
        FULLTEXT idx_search (title, description, employer)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    `)
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ jobs —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞')

    // –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è)
    await pool.query(`
      CREATE TABLE IF NOT EXISTS applications (
        id INT AUTO_INCREMENT PRIMARY KEY,
        job_id INT NOT NULL,
        user_id INT NOT NULL,
        status ENUM('pending', 'reviewed', 'accepted', 'rejected') DEFAULT 'pending',
        cover_letter TEXT,
        employer_comment TEXT,
        applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        
        FOREIGN KEY (job_id) REFERENCES jobs(id) ON DELETE CASCADE,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
        INDEX idx_status (status),
        INDEX idx_applied_at (applied_at),
        UNIQUE KEY unique_application (job_id, user_id)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    `)
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ applications —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞')

    // –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
    await pool.query(`
      CREATE TABLE IF NOT EXISTS categories (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(100) NOT NULL UNIQUE,
        description TEXT,
        icon VARCHAR(50),
        parent_id INT,
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        
        FOREIGN KEY (parent_id) REFERENCES categories(id) ON DELETE SET NULL,
        INDEX idx_parent (parent_id),
        INDEX idx_active (is_active)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    `)
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ categories —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞')

    // –í—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await pool.query(`
      INSERT IGNORE INTO categories (name, description, icon) VALUES
      ('–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–†–∞–±–æ—Ç—ã –≤ —Å—Ñ–µ—Ä–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ —Ä–µ–º–æ–Ω—Ç–∞', 'fas fa-hammer'),
      ('–£–±–æ—Ä–∫–∞', '–ö–ª–∏–Ω–∏–Ω–≥–æ–≤—ã–µ —É—Å–ª—É–≥–∏ –∏ —É–±–æ—Ä–∫–∞ –ø–æ–º–µ—â–µ–Ω–∏–π', 'fas fa-broom'),
      ('–î–æ—Å—Ç–∞–≤–∫–∞', '–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤', 'fas fa-truck'),
      ('IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'fas fa-laptop-code'),
      ('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–†–µ–ø–µ—Ç–∏—Ç–æ—Ä—Å—Ç–≤–æ, –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–µ, —Ç—Ä–µ–Ω–∏–Ω–≥–∏', 'fas fa-graduation-cap'),
      ('–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ', '–°–∞–ª–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏, –º–∞—Å—Å–∞–∂, —Ñ–∏—Ç–Ω–µ—Å', 'fas fa-spa'),
      ('–¢–æ—Ä–≥–æ–≤–ª—è', '–ü—Ä–æ–¥–∞–∂–∏, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –ø—Ä–æ–º–æ—É—Ç–µ—Ä—Å—Ç–≤–æ', 'fas fa-shopping-cart'),
      ('–ö—É–ª–∏–Ω–∞—Ä–∏—è', '–ì–æ—Ç–æ–≤–∫–∞, –∫–µ–π—Ç–µ—Ä–∏–Ω–≥, –ø–æ–º–æ—â—å –Ω–∞ –∫—É—Ö–Ω–µ', 'fas fa-utensils'),
      ('–ê–≤—Ç–æ–º–æ–±–∏–ª–∏', '–†–µ–º–æ–Ω—Ç, –º–æ–π–∫–∞, —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∞–≤—Ç–æ', 'fas fa-car'),
      ('–î–∏–∑–∞–π–Ω', '–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω, –∏–Ω—Ç–µ—Ä—å–µ—Ä, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ', 'fas fa-palette'),
      ('–ü–µ—Ä–µ–≤–æ–¥—ã', '–ü–∏—Å—å–º–µ–Ω–Ω—ã–µ –∏ —É—Å—Ç–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã', 'fas fa-language'),
      ('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–§–æ—Ç–æ—Å—ä–µ–º–∫–∞, –≤–∏–¥–µ–æ—Å—ä–µ–º–∫–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞', 'fas fa-camera'),
      ('–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ', '–£—Ö–æ–¥ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏, –ª–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω', 'fas fa-seedling'),
      ('–ñ–∏–≤–æ—Ç–Ω—ã–µ', '–£—Ö–æ–¥ –∑–∞ –ø–∏—Ç–æ–º—Ü–∞–º–∏, –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏', 'fas fa-paw'),
      ('–î—Ä—É–≥–æ–µ', '–ü—Ä–æ—á–∏–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç', 'fas fa-ellipsis-h')
    `)
    console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã')

    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
    await pool.query(`
      CREATE TABLE IF NOT EXISTS notifications (
        id INT AUTO_INCREMENT PRIMARY KEY,
        user_id INT NOT NULL,
        title VARCHAR(255) NOT NULL,
        message TEXT NOT NULL,
        type ENUM('info', 'success', 'warning', 'error') DEFAULT 'info',
        is_read BOOLEAN DEFAULT FALSE,
        related_type VARCHAR(50),
        related_id INT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
        INDEX idx_user_unread (user_id, is_read),
        INDEX idx_created_at (created_at)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    `)
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ notifications —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞')

    // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (process.env.NODE_ENV === 'development') {
      console.log('üîß –°–æ–∑–¥–∞—é –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...')
      
      // –î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      const bcrypt = require('bcryptjs')
      const hashedPassword = await bcrypt.hash('password123', 12)
      
      await pool.query(`
        INSERT IGNORE INTO users (name, email, password, phone, user_type, photo, age, skills, experience, has_other_jobs) VALUES
        ('–ò–≤–∞–Ω –†–∞–±–æ—Ç–Ω–∏–∫', 'worker@example.com', ?, '+996 555 123456', 'worker', '', 28, '["–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–†–µ–º–æ–Ω—Ç", "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞"]', '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ 5 –ª–µ—Ç', false),
        ('–ê–ª–µ–∫—Å–µ–π –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å', 'employer@example.com', ?, '+996 700 654321', 'employer', '', 35, '[]', '–í–ª–∞–¥–µ–ª–µ—Ü —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏', false),
        ('–ú–∞—Ä–∏—è –î–∏–∑–∞–π–Ω–µ—Ä', 'maria@example.com', ?, '+996 777 111222', 'worker', '', 25, '["–î–∏–∑–∞–π–Ω", "–§–æ—Ç–æ—à–æ–ø", "–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è"]', '–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä —Å –æ–ø—ã—Ç–æ–º 3 –≥–æ–¥–∞', true),
        ('–°–µ—Ä–≥–µ–π –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å', 'sergey@example.com', ?, '+996 666 333444', 'employer', '', 40, '[]', '–í–ª–∞–¥–µ–ª–µ—Ü IT-–∫–æ–º–ø–∞–Ω–∏–∏', false)
      `, [hashedPassword, hashedPassword, hashedPassword, hashedPassword])

      // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const [users]: any = await pool.query('SELECT id, user_type FROM users WHERE email IN (?, ?, ?, ?)', 
        ['worker@example.com', 'employer@example.com', 'maria@example.com', 'sergey@example.com'])
      
      const employerIds = users.filter((u: any) => u.user_type === 'employer').map((u: any) => u.id)
      
      if (employerIds.length > 0) {
        // –î–µ–º–æ –≤–∞–∫–∞–Ω—Å–∏–∏
        await pool.query(`
          INSERT IGNORE INTO jobs (title, description, salary, salary_amount, location, phone, category, requirements, employer, urgency, employment_type, user_id) VALUES
          ('–ú–∞—Å—Ç–µ—Ä –ø–æ —Ä–µ–º–æ–Ω—Ç—É –∫–≤–∞—Ä—Ç–∏—Ä', '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã. –†–∞–±–æ—Ç—ã –≤–∫–ª—é—á–∞—é—Ç: –ø–æ–∫–ª–µ–π–∫–∞ –æ–±–æ–µ–≤, –ø–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∏–Ω—Ç—É—Å–æ–≤.', '25000-30000 —Å–æ–º', 25000, '–ë–∏—à–∫–µ–∫, —Ä-–Ω –¶–µ–Ω—Ç—Ä', '+996 700 123456', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '["–û–ø—ã—Ç —Ä–µ–º–æ–Ω—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç", "–ù–∞–ª–∏—á–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞", "–ê–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç—å"]', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è "–†–µ–º–æ–Ω—Ç+"', 'high', 'contract', ?),
          ('–£–±–æ—Ä—â–∏—Ü–∞ –≤ –æ—Ñ–∏—Å', '–¢—Ä–µ–±—É–µ—Ç—Å—è —É–±–æ—Ä—â–∏—Ü–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —É–±–æ—Ä–∫–∏ –æ—Ñ–∏—Å–Ω–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è. –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: –ø–Ω-–ø—Ç —Å 18:00 –¥–æ 20:00', '15000 —Å–æ–º/–º–µ—Å—è—Ü', 15000, '–ë–∏—à–∫–µ–∫, –ø—Ä–æ—Å–ø–µ–∫—Ç –ß—É–π', '+996 555 987654', '–£–±–æ—Ä–∫–∞', '["–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "–ü—É–Ω–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å"]', '–û–û–û "–ö–ª–∏–Ω –°–µ—Ä–≤–∏—Å"', 'medium', 'part-time', ?),
          ('–ö—É—Ä—å–µ—Ä –Ω–∞ –ø–æ–ª–Ω—ã–π –¥–µ–Ω—å', '–í —Å–≤—è–∑–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –∏—â–µ–º –∫—É—Ä—å–µ—Ä–∞ –Ω–∞ –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å. –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –Ω–µ–±–æ–ª—å—à–∏—Ö –≥—Ä—É–∑–æ–≤ –ø–æ –≥–æ—Ä–æ–¥—É.', '20000-35000 —Å–æ–º', 20000, '–ë–∏—à–∫–µ–∫', '+996 777 456789', '–î–æ—Å—Ç–∞–≤–∫–∞', '["–ù–∞–ª–∏—á–∏–µ –ª–∏—á–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", "–ó–Ω–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"]', '–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è', 'medium', 'full-time', ?),
          ('–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (—É–¥–∞–ª–µ–Ω–Ω–æ)', '–ò—â–µ–º frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–º. –í–æ–∑–º–æ–∂–Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞.', '40000-60000 —Å–æ–º', 40000, '–£–¥–∞–ª–µ–Ω–Ω–æ', '+996 312 123456', 'IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '["HTML/CSS", "JavaScript", "Vue.js –∏–ª–∏ React", "–û–ø—ã—Ç –æ—Ç 1 –≥–æ–¥–∞"]', 'IT Startup', 'low', 'freelance', ?)
        `, [employerIds[0], employerIds[0], employerIds[1] || employerIds[0], employerIds[1] || employerIds[0]])
        
        console.log('‚úÖ –î–µ–º–æ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–æ–∑–¥–∞–Ω—ã')
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    const [jobsCount]: any = await pool.query('SELECT COUNT(*) as count FROM jobs')
    const [usersCount]: any = await pool.query('SELECT COUNT(*) as count FROM users')
    const [categoriesCount]: any = await pool.query('SELECT COUNT(*) as count FROM categories')

    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:')
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${usersCount[0].count}`)
    console.log(`   –í–∞–∫–∞–Ω—Å–∏–∏: ${jobsCount[0].count}`)
    console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoriesCount[0].count}`)
    
    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!')
    process.exit(0)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:', error)
    process.exit(1)
  }
}

migrate()