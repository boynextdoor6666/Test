// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway MySQL
require('dotenv').config()
const mysql = require('mysql2/promise')

const databaseUrl = 'mysql://root:YqcLGUQwuJZbHdeWXDgqOrhcPVnIjQxO@mainline.proxy.rlwy.net:53929/railway'

async function testConnection() {
  console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway MySQL...')
  console.log('üîó URL:', databaseUrl.replace(/:[^:]*@/, ':****@')) // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const connection = await mysql.createConnection({
      uri: databaseUrl,
      ssl: {
        rejectUnauthorized: false
      }
    })
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é MySQL
    const [versionRows] = await connection.query('SELECT VERSION() as version, NOW() as current_time')
    console.log('üìä –í–µ—Ä—Å–∏—è MySQL:', versionRows[0].version)
    console.log('üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:', versionRows[0].current_time)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const [tables] = await connection.query('SHOW TABLES')
    console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:')
    if (tables.length === 0) {
      console.log('   (—Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞)')
    } else {
      tables.forEach((table, index) => {
        console.log(`   ${index + 1}. ${Object.values(table)[0]}`)
      })
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const [grants] = await connection.query('SHOW GRANTS')
    console.log('üîê –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã ‚úÖ')
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    try {
      await connection.query(`
        CREATE TABLE IF NOT EXISTS test_connection (
          id INT AUTO_INCREMENT PRIMARY KEY,
          test_message VARCHAR(255),
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `)
      console.log('üõ†Ô∏è –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: ‚úÖ')
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å—Ç–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
      await connection.query(
        'INSERT INTO test_connection (test_message) VALUES (?)',
        ['Connection test successful']
      )
      console.log('üíæ –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ')
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      const [testRows] = await connection.query(
        'SELECT * FROM test_connection ORDER BY created_at DESC LIMIT 1'
      )
      console.log('üìñ –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ‚úÖ')
      console.log('üìù –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å:', testRows[0])
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
      await connection.query('DROP TABLE test_connection')
      console.log('üóëÔ∏è –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: ‚úÖ')
      
    } catch (testError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π:', testError.message)
    }
    
    await connection.end()
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
    console.log('')
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!')
    console.log('üìù –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏: npm run migrate')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message)
    console.error('')
    console.error('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:')
    console.error('1. –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
    console.error('2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
    console.error('3. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é')
    console.error('4. –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
    console.error('')
    console.error('üí° –†–µ—à–µ–Ω–∏—è:')
    console.error('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ Railway Dashboard')
    console.error('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞')
    console.error('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞')
    
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testConnection()